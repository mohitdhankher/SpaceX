{"version":3,"sources":["RoiNavBar.js","SpacCard.js","SpacCenterPage.js","DashBoardSpac.js","App.js","serviceWorker.js","history.js","index.js"],"names":["memo","props","filteryear","e","Grid","sm","className","container","justify","map","name","index","lg","md","exact","to","pathname","state","fromNotifications","activeClassName","Button","onClick","key","LandfromNotifications","useStyles","makeStyles","root","maxWidth","fullHeightCard","height","item","mission_name","flight_number","launch_year","launch_success","mission_id","rocket","links","land_success","first_stage","cores","url","mission_patch","classes","Fragment","Card","CardActionArea","CardMedia","component","alt","square","src","title","CardContent","Typography","gutterBottom","variant","color","data","DashBoardSpac","useState","datainitial","dataall","setData","useEffect","a","fetch","responses","json","datas","fetchDatas","App","path","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70a0f289.chunk.js","sourcesContent":["/**\r\n *\r\n * RoiNavBar\r\n *\r\n */\r\n\r\nimport React, { memo } from \"react\";\r\nimport { NavLink} from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// import './style.css'\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nfunction RoiNavBar(props) {\r\n    // const isActive = (path, match, location) => !!(match || path === location.pathname);\r\n    let arrayyear = ['2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019']\r\n    let filteryear = (e)=>{\r\n        props.filteryear(e);\r\n    }\r\n    return (\r\n        <Grid sm={12} className=\"padCh\" container justify={\"space-evenly\"}>\r\n        <nav className=\"navColor\">\r\n            <Grid>\r\n                Filter\r\n            </Grid>\r\n            <Grid>\r\n                Launch Year\r\n            </Grid>\r\n            <Grid  container  sm={12} className=\"button\">\r\n                 \r\n                { arrayyear.map(function(name, index){\r\n                    return <Grid className=\"col-sm-6\" lg={6}  md={5}> <NavLink exact  to={{\r\n                        pathname: \"spac\",\r\n                        state: {\r\n                            fromNotifications: true\r\n                        }\r\n                    }\r\n                    }\r\n                                                  className=\"alignHome\" activeClassName=\"active\" >\r\n                        <Button className=\"buttoncolor\" onClick={filteryear} key={ index }> {name} </Button>\r\n                    </NavLink></Grid>\r\n                })}\r\n               </Grid>\r\n                <Grid container className=\"col-sm-12\">\r\n                    Successful Launch\r\n                </Grid>\r\n            \r\n            <Grid container sm={12} className=\"button\">\r\n                <Grid className=\"col-sm-6\" lg={5} sm={6} >\r\n                    <NavLink exact  to={{\r\n                        pathname: \"LaunchSuccess\",\r\n                        state: {\r\n                            fromNotifications: true\r\n                        }\r\n                    }\r\n                    }\r\n                             className=\"alignHome\" activeClassName=\"active\" >\r\n                        <Button className=\"buttoncolor\"> True </Button>\r\n                    </NavLink>\r\n                </Grid>\r\n                <Grid className=\"col-sm-6\" lg={5}  md={5} sm={6}>\r\n                    <NavLink exact  to={{\r\n                        pathname: \"LaunchSuccess\",\r\n                        state: {\r\n                            fromNotifications: false\r\n                        }\r\n                    }\r\n                    }\r\n                             className=\"alignHome\" activeClassName=\"active\" >\r\n                        <Button className=\"buttoncolor\"> False </Button>\r\n                    </NavLink>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid>\r\n                Landing Succesful\r\n            </Grid>\r\n            <Grid container sm={12}  className=\"button\">\r\n                <Grid className=\"col-sm-6\" lg={5}  md={5} sm={6}>\r\n                    <NavLink exact  to={{\r\n                        pathname: \"LandingSuccess\",\r\n                        state: {\r\n                            LandfromNotifications: true\r\n                        }\r\n                    }\r\n                    }\r\n                             className=\"alignHome\" activeClassName=\"active\" >\r\n                        <Button className=\"buttoncolor\"> True </Button>\r\n                    </NavLink>\r\n                </Grid>\r\n                <Grid className=\"col-sm-6\" lg={5}  md={5} sm={6}>\r\n                    <NavLink exact  to={{\r\n                        pathname: \"LandingSuccess\",\r\n                        state: {\r\n                            LandfromNotifications: false\r\n                        }\r\n                    }\r\n                    }\r\n                             className=\"alignHome\" activeClassName=\"active\" >\r\n                        <Button className=\"buttoncolor\"> False </Button>\r\n                    </NavLink>\r\n                </Grid>\r\n            </Grid>\r\n            </nav>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nRoiNavBar.propTypes = {};\r\n\r\nexport default memo(RoiNavBar);","/**\r\n *\r\n * SpacCard\r\n *\r\n */\r\n\r\nimport React, { memo } from \"react\";\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import './style.css';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    fullHeightCard: {\r\n        height: \"100%\",\r\n       \r\n\t},\r\n});\r\nfunction SpacCard({item:{mission_name,flight_number,launch_year,launch_success,mission_id,rocket,links}}) {\r\n\r\n       let  land_success = rocket.first_stage.cores[0].land_success\r\n       let url = links.mission_patch\r\n   debugger;\r\n    const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n            <Grid sm={12} md={3} lg={3} className=\"col-sm-12 col\" >\r\n        <Card className={classes.fullHeightCard}  >\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    component=\"img\"\r\n                    alt=\"Contemplative Reptile\"\r\n                    height=\"140\"\r\n                    square\r\n                    src={url}\r\n                    title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {mission_name} # {flight_number}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Mission Id:\r\n                       <ul>\r\n                        { mission_id.map(function(name, index){\r\n                            return <li key={ index }>{name}</li>;\r\n                        })}\r\n                    </ul>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Launch Year:  {launch_year}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Successful Launch:  {`${launch_success}`}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Successful Landing:  {`${land_success}`}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>   \r\n        </Card>\r\n            </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nSpacCard.propTypes = {};\r\n\r\nexport default memo(SpacCard);\r\n","/**\r\n *\r\n * SpacCenterPage\r\n *\r\n */\r\n\r\nimport React, { memo } from \"react\";\r\n// import PropTypes from 'prop-types';\r\n\r\nimport SpacCard from \"./SpacCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction SpacCenterPage(props) {\r\n    const data = props.data\r\n\r\n    if(data) {\r\n        return (\r\n            <Grid container>\r\n                {data.map(item => (\r\n\r\n                    <SpacCard item={item} key={item}/>\r\n\r\n                    // <li key={item}>\r\n                    //     <a href={item.url}>{item.title}</a>\r\n                    // </li>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nSpacCenterPage.propTypes = {};\r\n\r\nexport default memo(SpacCenterPage);\r\n","\r\nimport React, { memo,useEffect ,useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport RoiNavBar from \"./RoiNavBar\";\r\nimport SpacCenterPage from \"./SpacCenterPage\";\r\n// import './style.css';\r\nimport Card from '@material-ui/core/Card';\r\nexport function DashBoardSpac() {\r\n    const [data, setData] = useState({datainitial:[],\r\n        dataall:[]});\r\n    useEffect(() => {   \r\n        // SpaceXData();\r\n        let fetchDatas = async () => {\r\n            const responses = await fetch(\r\n\r\n                `https://api.spaceXdata.com/v3/launches?limit=100`\r\n            );\r\n            debugger;\r\n            const datas = await responses.json();\r\n            debugger\r\n            setData({...data,datainitial: datas,dataall: datas});\r\n            // setData({...data,dataall: data});\r\n\r\n        };;\r\n\r\n            fetchDatas();\r\n\r\n    }, []);\r\n  \r\n    let filteryear = (e)=>{\r\n        debugger;\r\n        let year = e.target.innerText ;\r\n        let years;\r\n        if(data) {\r\n            years = data.dataall.filter(\r\n                city=> city.launch_year === year);\r\n        }\r\n        setData({...data,datainitial: years});\r\n    }\r\n   \r\n  return (\r\n    <Card className=\"maincard\">\r\n      <h1>SpaceX Launch Program</h1>\r\n      </Card>\r\n  );\r\n}\r\n\r\nexport default DashBoardSpac;\r\n","import React from 'react';\nimport './App.css';\nimport {Switch, Route} from 'react-router-dom';\nimport DashBoardSpac from \"./DashBoardSpac\";\nfunction App() {\n    return (\n      <Switch>\n          <Route exact path=\"/\" component={DashBoardSpac}/>\n          \n      </Switch>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport history from './history';\nReactDOM.render(\n  <React.StrictMode>\n     <BrowserRouter history={history} >\n    <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}